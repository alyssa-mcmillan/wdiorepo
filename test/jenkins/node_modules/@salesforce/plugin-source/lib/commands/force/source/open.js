"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Open = void 0;
const os = require("os");
const path = require("path");
const open = require("open");
const ts_types_1 = require("@salesforce/ts-types");
const core_1 = require("@salesforce/core");
const command_1 = require("@salesforce/command");
const core_2 = require("@salesforce/core");
const checkLightningDomain_1 = require("@salesforce/core/lib/util/checkLightningDomain");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const openResultFormatter_1 = require("../../../formatters/openResultFormatter");
const sourceCommand_1 = require("../../../sourceCommand");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-source', 'open');
class Open extends sourceCommand_1.SourceCommand {
    async run() {
        await this.doOpen();
        this.resolveSuccess();
        return this.formatResult();
    }
    resolveSuccess() {
        if (!ts_types_1.getString(this.openResult, 'url')) {
            process.exitCode = 1;
        }
    }
    formatResult() {
        const formatter = new openResultFormatter_1.OpenResultFormatter(this.logger, this.ux, this.openResult);
        if (!this.isJsonOutput()) {
            formatter.display();
        }
        return formatter.getJson();
    }
    async doOpen() {
        const typeName = this.getTypeNameDefinitionByFileName(path.resolve(this.flags.sourcefile));
        const openPath = typeName === 'FlexiPage' ? await this.handleSupportedTypes() : await this.handleUnsupportedTypes();
        this.openResult = await this.open(openPath);
    }
    getTypeNameDefinitionByFileName(fsPath) {
        if (core_1.fs.fileExistsSync(fsPath)) {
            const metadataResolver = new source_deploy_retrieve_1.MetadataResolver();
            const components = metadataResolver.getComponentsFromPath(fsPath);
            return components[0].type.name;
        }
        return undefined;
    }
    async handleSupportedTypes() {
        return await this.setUpOpenPath();
    }
    async handleUnsupportedTypes() {
        return await this.buildFrontdoorUrl();
    }
    async getUrl(retURL) {
        const frontDoorUrl = await this.buildFrontdoorUrl();
        return `${frontDoorUrl}&retURL=${encodeURIComponent(decodeURIComponent(retURL))}`;
    }
    async buildFrontdoorUrl() {
        const connection = this.org.getConnection();
        const { username } = connection.getAuthInfoFields();
        const authInfo = await core_1.AuthInfo.create({ username });
        const url = authInfo.getOrgFrontDoorUrl();
        return url;
    }
    async open(src, urlonly) {
        const connection = this.org.getConnection();
        const { username, orgId } = connection.getAuthInfoFields();
        const url = await this.getUrl(src);
        const act = () => this.flags.urlonly || urlonly ? { url, username, orgId } : this.openBrowser(url, { url, username, orgId });
        if (core_2.sfdc.isInternalUrl(url)) {
            return act();
        }
        try {
            const result = await checkLightningDomain_1.default(url);
            if (result) {
                return act();
            }
        }
        catch (error) {
            throw core_2.SfdxError.create('@salesforce/plugin-source', 'open', 'SourceOpenCommandTimeoutError');
        }
    }
    async deriveFlexipageURL(flexipage) {
        const connection = this.org.getConnection();
        const queryResult = await connection.tooling.query(`SELECT id FROM flexipage WHERE DeveloperName='${flexipage}'`);
        if (queryResult.totalSize === 1 && queryResult.records) {
            const record = queryResult.records[0];
            return record.Id;
        }
        return;
    }
    async setUpOpenPath() {
        const id = await this.deriveFlexipageURL(path.basename(this.flags.sourcefile, '.flexipage-meta.xml'));
        if (id) {
            return `/visualEditor/appBuilder.app?pageId=${id}`;
        }
        return '_ui/flexipage/ui/FlexiPageFilterListPage';
    }
    openBrowser(url, options) {
        void open(url);
        return options;
    }
}
exports.Open = Open;
Open.description = messages.getMessage('description');
Open.examples = messages.getMessage('examples').split(os.EOL);
Open.requiresProject = true;
Open.requiresUsername = true;
Open.flagsConfig = {
    sourcefile: command_1.flags.filepath({
        char: 'f',
        required: true,
        description: messages.getMessage('SourceOpenFileDescription'),
    }),
    urlonly: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('SourceOpenPathDescription'),
    }),
};
//# sourceMappingURL=open.js.map