import { ForceIgnore } from './forceIgnore';
import { TreeContainer } from './treeContainers';
import { MetadataComponent, VirtualDirectory } from './types';
import { JsonMap } from '@salesforce/ts-types';
import { SfdxFileFormat } from '../convert';
import { MetadataType } from '../registry';
export declare type ComponentProperties = {
    name: string;
    type: MetadataType;
    xml?: string;
    content?: string;
    parent?: SourceComponent;
};
/**
 * Representation of a MetadataComponent in a file tree.
 */
export declare class SourceComponent implements MetadataComponent {
    readonly name: string;
    readonly type: MetadataType;
    readonly xml?: string;
    readonly parent?: SourceComponent;
    content?: string;
    private _tree;
    private forceIgnore;
    private markedForDelete;
    constructor(props: ComponentProperties, tree?: TreeContainer, forceIgnore?: ForceIgnore);
    static createVirtualComponent(props: ComponentProperties, fs: VirtualDirectory[], forceIgnore?: ForceIgnore): SourceComponent;
    walkContent(): string[];
    getChildren(): SourceComponent[];
    parseXml<T = JsonMap>(): Promise<T>;
    parseXmlSync<T = JsonMap>(): T;
    getPackageRelativePath(fsPath: string, format: SfdxFileFormat): string;
    /**
     * @returns whether this component should be part of destructive changes.
     */
    isMarkedForDelete(): boolean;
    setMarkedForDelete(asDeletion: boolean): void;
    private parse;
    private getDecomposedChildren;
    private getNonDecomposedChildren;
    private walk;
    get fullName(): string;
    get tree(): TreeContainer;
}
